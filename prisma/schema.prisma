// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        Role?    // Nullable - solo superadmins tienen rol
  image       String?  // URL de imagen de perfil
  isOnboarded Boolean  @default(false) // Si completó onboarding
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relación con tokens OTP
  otpTokens OtpToken[]
  
  // Relación con workspaces
  workspaces WorkspaceUser[]
  
  // Relación con invitaciones enviadas
  invitations WorkspaceInvitation[]
  
  // Relaciones F1
  predictions    Prediction[]
  seasonStandings SeasonStanding[]
  
  @@map("users")
}

model OtpToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  // Relación con usuario
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_tokens")
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?  // URL de imagen del workspace
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relación con usuarios
  users WorkspaceUser[]
  
  // Relación con invitaciones
  invitations WorkspaceInvitation[]
  
  // Relaciones F1
  workspaceSeasons WorkspaceSeason[]
  
  @@map("workspaces")
}

model WorkspaceUser {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(member)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relaciones
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  @@unique([userId, workspaceId])
  @@map("workspace_users")
}

enum Role {
  superadmin // Super admin del sistema
}

enum WorkspaceRole {
  admin  // Admin del workspace
  member // Miembro del workspace
}

model WorkspaceInvitation {
  id          String        @id @default(cuid())
  email       String
  workspaceId String
  role        WorkspaceRole @default(member)
  token       String        @unique
  expiresAt   DateTime
  invitedById String
  acceptedAt  DateTime?
  createdAt   DateTime      @default(now())
  
  // Relaciones
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation(fields: [invitedById], references: [id])
  
  @@index([email])
  @@index([token])
  @@map("workspace_invitations")
}

// ============================================
// MODELOS F1 - SISTEMA DE PREDICCIONES
// ============================================

model Season {
  id          String   @id @default(cuid())
  year        Int      @unique
  name        String   // "F1 2025 Season"
  isActive    Boolean  @default(false)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  grandPrix        GrandPrix[]
  workspaceSeasons WorkspaceSeason[]
  
  @@index([year])
  @@map("seasons")
}

model WorkspaceSeason {
  id            String   @id @default(cuid())
  workspaceId   String
  seasonId      String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  season        Season    @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  standings     SeasonStanding[]
  predictions   Prediction[]
  
  @@unique([workspaceId, seasonId])
  @@map("workspace_seasons")
}

model GrandPrix {
  id                String   @id @default(cuid())
  seasonId          String
  round             Int      // Número de carrera en la temporada
  name              String   // "Australian Grand Prix"
  location          String   // "Melbourne"
  country           String   // "Australia"
  circuit           String   // "Albert Park"
  raceDate          DateTime
  qualifyingDate    DateTime
  isSprint          Boolean  @default(false)
  timezone          String   // "Australia/Melbourne"
  focusPilot        String?  // Nombre del piloto en el foco
  focusPilotContext String?  // Contexto o razón de la selección
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relaciones
  season        Season       @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  gpQuestions   GPQuestion[]
  predictions   Prediction[]
  
  @@index([seasonId, round])
  @@map("grand_prix")
}

model Question {
  id            String           @id @default(cuid())
  text          String           // "¿Quién ganará la carrera?"
  type          QuestionType
  category      QuestionCategory
  defaultPoints Int              @default(10)
  options       Json?            // Opciones predefinidas para la pregunta
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relaciones
  gpQuestions   GPQuestion[]
  
  @@index([category])
  @@map("questions")
}

model GPQuestion {
  id            String           @id @default(cuid())
  grandPrixId   String
  questionId    String?          // Opcional para preguntas inline
  points        Int              // Puntos específicos para este GP
  order         Int              // Orden de aparición en el formulario
  
  // Campos para preguntas inline (cuando questionId es null)
  text          String?          // Texto de la pregunta inline
  type          QuestionType?    // Tipo de la pregunta inline
  category      QuestionCategory? // Categoría de la pregunta inline
  options       Json?            // Opciones para la pregunta inline
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relaciones
  grandPrix     GrandPrix    @relation(fields: [grandPrixId], references: [id], onDelete: Cascade)
  question      Question?    @relation(fields: [questionId], references: [id])
  predictions   Prediction[]
  
  @@unique([grandPrixId, questionId])
  @@index([grandPrixId, category])
  @@map("gp_questions")
}

model Prediction {
  id                 String   @id @default(cuid())
  workspaceSeasonId  String
  userId             String
  grandPrixId        String
  gpQuestionId       String
  answer             String   // Respuesta del usuario (nombre del piloto, equipo, etc.)
  earnedPoints       Int?     // Puntos ganados (null hasta que se ingresen resultados)
  submittedAt        DateTime @default(now())
  
  // Relaciones
  workspaceSeason    WorkspaceSeason @relation(fields: [workspaceSeasonId], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  grandPrix          GrandPrix       @relation(fields: [grandPrixId], references: [id])
  gpQuestion         GPQuestion      @relation(fields: [gpQuestionId], references: [id])
  
  @@unique([workspaceSeasonId, userId, grandPrixId, gpQuestionId])
  @@index([workspaceSeasonId, userId])
  @@map("predictions")
}

model SeasonStanding {
  id                 String   @id @default(cuid())
  workspaceSeasonId  String
  userId             String
  totalPoints        Int      @default(0)
  position           Int?     // Posición en la tabla (se calcula)
  predictionsCount   Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relaciones
  workspaceSeason    WorkspaceSeason @relation(fields: [workspaceSeasonId], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([workspaceSeasonId, userId])
  @@map("season_standings")
}

// Enum para tipos de preguntas
enum QuestionType {
  WINNER        // Ganador de carrera
  PODIUM        // Top 3
  FASTEST_LAP   // Vuelta rápida
  POLE_POSITION // Pole en clasificación
  DNF           // Did Not Finish
  POINTS_FINISH // Terminar en puntos
  TEAM_WINNER   // Equipo ganador
  MULTIPLE_CHOICE // Opción múltiple
  NUMERIC       // Respuesta numérica
  BOOLEAN       // Sí/No
  HEAD_TO_HEAD  // Comparación entre pilotos
}

// Enum para categorías de preguntas
enum QuestionCategory {
  CLASSIC       // Preguntas clásicas
  PILOT_FOCUS   // Piloto en el foco
  STROLLOMETER  // Strollómetro
}